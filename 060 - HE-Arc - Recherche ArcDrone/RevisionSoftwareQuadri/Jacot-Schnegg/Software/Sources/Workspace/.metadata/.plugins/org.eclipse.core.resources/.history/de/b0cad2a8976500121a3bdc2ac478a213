/*
 * mOrientationProcessing.c
 *
 *  Created on: 26 nov. 2012
 *      Author: alexandr.schnegg
 */

#include "def.h"
#include "mCapteurGyro.h"
#include "mCapteurAccelMagn.h"
#include <cmath>
#include "generateTrame.h"
#include "def.h"
#include "mCapteurAccelMagn.h"
#include "mCapteurGyro.h"
#include "mOrientationProcessing.h"
#include "stringConvert.h"
#include "mRegulation.h"

#define kNbCapteurs	3
#define kAccOffset 0
#define kAccScale (float)16384
#define kGyroScale (float)131.072
#define kGyroOffsetX (Int16)2650
#define kGyroOffsetY (Int16)62930
#define kGyroOffsetZ (Int16)2750
#define kTau (float)0.025
#define kDt	(kTau / (float)5)
#define kA (float)(kTau/(kDt+kTau))
#define kB (float)(1-kA)

void mOrientationProcessing_setup(void)
{
	// PIT0 setup
	iPit_Config(kPit1, (UInt16) (kDt * 1000));
}

void mOrientationProcessing_open(void)
{
	// PIT0 setup
	iPit_StartPit(kPit1);
}

/**
 * aRacc=Racc={Rx,Ry,Rz}
 */
void mOrientationProcessing_computeSensor(UInt16 *aAccelTabIn, UInt16 *aGyroTabIn, float *aRacc, float *aGyroTab)
{
	UInt8 i;

	//Mise en forme accel
	for (i = 0; i < 4; i++)
	{
		aRacc[i] = (float) ((Int16) aAccelTabIn[i] - kAccOffset) / kAccScale;
	}

	//Mise en forme gyro	
	aGyroTab[0] = (float) ((Int16) aGyroTabIn[0] - kGyroOffsetX) / kGyroScale; //Correspond Ayz
	aGyroTab[1] = (float) ((Int16) aGyroTabIn[1] - kGyroOffsetY) / kGyroScale; //Correspond Axz
	aGyroTab[2] = (float) ((Int16) aGyroTabIn[2] - kGyroOffsetZ) / kGyroScale; //Correspond Ayx
}

/**
 * Convertion du vecteur d'acceleration en angle dans le système gyroscopique
 * aA={Axz,Axy,Ayz}
 */
void mOrientationProcessing_convertToGyroSystem(float *aRacc, float *aA)
{
	aA[0] = atan2(-aRacc[1], aRacc[2]); //Axz gyro == A-yz accel
	aA[1] = atan2(-aRacc[0], -aRacc[1]); //Axy gyro == A-x-y accel
	aA[2] = atan2(-aRacc[0], aRacc[2]); //Ayz gyro == A-xz accel
}

void mOrientationProcessing_FilterFirstOrder(float *aAngle, float *aAngleRate, float *aResult)
{
	static float sResult_n1[] = { 0, 0, 0 };
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		aResult[i] = kB * (sResult_n1[i] + aAngleRate[i] * kDt) + kA * aAngle[i];
		sResult_n1[i] = aResult[i];
	}
}

void mOrientationProcessing_FilterSecondOrder(float *aAngle, float *aAngleRate, float *aResult)
{
	uint8_t i = 0;
	static float sResult_n1[] = { 0, 0, 0 };
	static float sResult_n2[] = { 0, 0, 0 };
	static float sAngle_n1[] = { 0, 0, 0 };
	static float sAngleRate_n1[] = { 0, 0, 0 };
	for (i = 0; i < 3; i++)
	{
		aResult[i] = 2 * kB * sResult_n1[i] - kB * kB * sResult_n2[i] + (1 - kB * kB) * aAngle[i] - 2 * kB * (1 - kB) * sAngle_n1[i] + kB * kB * kTau * (aAngleRate[i] - sAngleRate_n1[i]);
		sResult_n2[i] = sResult_n1[i];
		sResult_n1[i] = aResult[i];
		sAngle_n1[i] = aAngle[i];
		sAngleRate_n1[i] = aAngleRate[i];
	}
}

double mOrientationProcessing_RadToDeg(float aRad)
{
	return aRad * (180 / PI);
}

