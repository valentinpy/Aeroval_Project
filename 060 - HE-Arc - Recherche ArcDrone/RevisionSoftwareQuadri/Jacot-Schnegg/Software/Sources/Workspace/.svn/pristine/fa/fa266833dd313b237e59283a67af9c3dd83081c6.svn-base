/*
------------------------------------------------------------
Copyright 2003-20012 Haute école ARC Ingéniérie, Switzerland. 
All rights reserved.
------------------------------------------------------------
File name :	iCpu.c
Author and date :	Monnerat Serge 23.11.2011

Description in the header file iCpu.h

-----------------------------------------------------------------------------
History:
-----------------------------------------------------------------------------

$History: $

-----------------------------------------------------------------------------
*/

#include "iCpu.h"
#include "derivative.h"

// Peripherals clock init
static void iCpu_PeriphClkInit(void);
	
// Core and peripheral clock init
static void iCpu_PllInit(void);

// K10 pin functions configuration
static void iCpu_PinFctCfg(void);

// Internal voltage reference init (VREF0)
static void iCpu_VREFInit(void);

//------------------------------------------------------------
// Core and peripheral clock init
// External clock = 20MHz
// Core clock = 100MHz
// Peripheral bus = 50MHz
// Flexbus = 50MHz
// Flash = 25MHz
//------------------------------------------------------------
static void iCpu_PllInit(void)
{
	// If the internal load capacitors are being used, they should be selected
		// before enabling the oscillator. Application specific. 16pF and 8pF selected
		// in this example
		//OSC_CR = OSC_CR_SC16P_MASK | OSC_CR_SC8P_MASK;
		
	//Enable de l'oscillateur
	OSC_CR|=OSC_CR_ERCLKEN_MASK;
	
//Test resolution clk
//MCG_C3=0x6f;
//MCG_C4=0x5;
	 
		// Enable external oscillator, RANGE=2, HGO=1, EREFS=1, LP=0, IRCS=0
	MCG_C2=0;
		MCG_C2 = MCG_C2_RANGE(1) | MCG_C2_HGO_MASK | MCG_C2_EREFS_MASK;

	  // after initialization of oscillator release latched state of oscillator and GPIO
	  //SIM_SCGC4 |= SIM_SCGC4_LLWU_MASK;
	  //LLWU_CS |= LLWU_CS_ACKISO_MASK;
	  
	  // Select external oscilator and Reference Divider and clear IREFS to start ext osc
	  // CLKS=2, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
	  MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
	  
	  // Wait for oscillator to initialize
	  while (!(MCG_S & MCG_S_OSCINIT_MASK));
	  
	  // Wait for Reference clock Status bit to clear
	  while (MCG_S & MCG_S_IREFST_MASK); 
	  
	  // Wait for clock status bits to show clock source is ext ref clk
	  while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2); 

	  // Now in FBE

	  // Configure PLL Ref Divider, PLLCLKEN=0, PLLSTEN=0, PRDIV=5
	  // The crystal frequency is used to select the PRDIV value. Only even frequency crystals are supported
	  // that will produce a 2MHz reference clock to the PLL.
	  // 1 = divide factor -> 2 --> 4MHz/2 = 2MHz
	  MCG_C5 = MCG_C5_PRDIV(1); 

	  // Ensure MCG_C6 is at the reset default of 0. LOLIE disabled, PLL disabled, clk monitor disabled, PLL VCO divider is clear
	  //MCG_C6 = 0x0;
	  
	  // Set the VCO divider and enable the PLL for 100MHz, LOLIE=0, PLLS=1, CME=0, VDIV=26 (2MHz * 50)
	  MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(26); 
	 
	  // Wait for PLL status bit to set
	  while (!(MCG_S & MCG_S_PLLST_MASK)); 
	  
	  // Wait for LOCK bit to set
	  while (!(MCG_S & MCG_S_LOCK_MASK)); 
	  
	  // Set up the SIM clock dividers BEFORE switching to the PLL to ensure the
	  // system clock speeds are in spec.
	  // core = PLL (100MHz), bus = PLL/2 (50MHz), flexbus = PLL/2 (50MHz), flash = PLL/4 (25MHz)
	  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1)| SIM_CLKDIV1_OUTDIV3(1) | SIM_CLKDIV1_OUTDIV4(3); //TODO verifier
	  
	  // Now running PBE Mode

	  // Transition into PEE by setting CLKS to 0
	  // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
	  MCG_C1 &= ~MCG_C1_CLKS_MASK;
	  

	  // Wait for clock status bits to update
	  while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3);

	  // Now running PEE Mode
	  
		// Set the trace clock to the core clock frequency 
		SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;
		
		// Enable the clock to the FlexBus module
		SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
}


//------------------------------------------------------------
// K10 pin functions configuration
//------------------------------------------------------------
static void iCpu_PinFctCfg(void)
{
	// ---------------------------------------------------------
	// K10 pin functions configuration
	// K10 Sub-Family Reference Manual, Rev. 6, Nov 2011
	// Pin Control Register n (PORTx_PCRn) page 244
	// By default:
	// Bit 0: PS --> Internal pull-down resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable Register bit is set.
	// Bit 1: PE --> Internal pull-up or pull-down resistor is not enabled on the corresponding pin.
	// Bit 2: SRE --> Fast slew rate is configured on the corresponding pin, if pin is configured as a digital output.
	// Bit 3: Reserved 
	// Bit 4: PFE --> Passive Input Filter is disabled on the corresponding pin.
	// Bit 5: ODE --> Open Drain output is disabled on the corresponding pin.
	// Bit 6: DSE --> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
	// Bit 7: Reserved 
	// Bit 8,9,10: MUX --> Pin function, see below
	// Bit 11,12,13,14: Reserved
	// Bit 15: LK --> Pin Control Register bits [15:0] are not locked.
	// Bit 16,17,18,19: IRQC --> Interrupt/DMA Request disabled.
	// Bit 20,21,22,23: Reserved
	// Bit 24: ISF --> Interrupt Status Flag
	// Bit 25,26,27,28,29,30,31: Reserved
	// ---------------------------------------------------------
	
	// ---------------------------------------------------------
	// PORTA --> pin 0 to 5 well configured out of reset --> JTAG
	
	// PTA5 --> NC 
	PORTA_PCR5 = 0|(PORT_PCR_MUX(0x1));
	// PTA12 --> ModuleRF_SleepControl --> Digital Output
	PORTA_PCR12 = 0|(PORT_PCR_MUX(0x1));
	// PTA13 --> ModuleRF_Reset_n --> Digital Output
	PORTA_PCR13 = 0|(PORT_PCR_MUX(0x1));
	// PTA14 --> ModuleRF_DIN --> UART0_TX 
	PORTA_PCR14 = 0|(PORT_PCR_MUX(0x3));
	// PTA15 --> ModuleRF_DOUT --> UART0_RX  
	PORTA_PCR15 = 0|(PORT_PCR_MUX(0x3));
	// PTA16 --> ModuleRF_CTS_n --> UART0_CTS_b
	PORTA_PCR16 = 0|(PORT_PCR_MUX(0x3));
	// PTA17 --> ModuleRF_RTS_n --> UART0_RTS_b
	PORTA_PCR17 = 0|(PORT_PCR_MUX(0x3));
	// PTA18 --> EXTAL --> 
	PORTA_PCR18 = 0|(PORT_PCR_MUX(0x0));
	// PTA19 --> XTAL -->
	PORTA_PCR19 = 0|(PORT_PCR_MUX(0x0));
	
	// ---------------------------------------------------------
	// PORTB
		
	// PTB0 --> CaptAccelMagn_SCL --> I2C0_SCL
	PORTB_PCR0 = 0|(PORT_PCR_MUX(0x2));
	// PTB1 --> CaptAccelMagn_SDA --> I2CO_SDA
	PORTB_PCR1 = 0|(PORT_PCR_MUX(0x2));
	// PTB2 --> CaptAccelMagn_Int1 --> Digital Input --> Interrupt
	PORTB_PCR2 = 0|PORT_PCR_ISF_MASK|(PORT_PCR_MUX(0x1));
	// PTB3 --> CaptAccelMagn_Int2 --> Digital Input --> Interrupt
	PORTB_PCR3 = 0|PORT_PCR_ISF_MASK|(PORT_PCR_MUX(0x1));
	// PTB9 --> CaptAccelMagn_DRDY --> Digital Input --> Interrupt
	PORTB_PCR9 = 0|PORT_PCR_ISF_MASK|(PORT_PCR_MUX(0x1));
	// PTB10 --> InterfaceExterne_PTB10 --> Digital Output
	PORTB_PCR10 = 0|(PORT_PCR_MUX(0x1));
	// PTB11 --> InterfaceExterne_PTB11 --> Digital Output
	PORTB_PCR11 = 0|(PORT_PCR_MUX(0x1));	
	// PTB16 --> InterfaceExterne_PTB16 --> Digital Output
	PORTB_PCR16 =  0|(PORT_PCR_MUX(0x1));
	// PTB17 --> InterfaceExterne_PTB17 --> Digital Output
	PORTB_PCR17 = 0|(PORT_PCR_MUX(0x1));
	// PTB18 --> CaptPressure_MCLK --> FTM2_CH0
	PORTB_PCR18 = 0|(PORT_PCR_MUX(0x3));
	// PTB19 --> ModuleRF_RSSI PWM --> FTM2_CH1
	PORTB_PCR19 = 0|(PORT_PCR_MUX(0x3));
	// PTB20 --> InterfaceExterne_PTB20 --> Digital Output
	PORTB_PCR20 = 0|(PORT_PCR_MUX(0x1));
	// PTB21 --> InterfaceExterne_SPI2_CLK --> SPI2_CLK
	PORTB_PCR21 = 0|(PORT_PCR_MUX(0x2));
	// PTB22 --> InterfaceExterne_SPI2_SOUT --> SPI2_SOUT
	PORTB_PCR22 = 0|(PORT_PCR_MUX(0x2));
	// PTB23 --> InterfaceExterne_SPI2_SIN --> SPI2_SIN
	PORTB_PCR23 = 0|(PORT_PCR_MUX(0x2));
	
	// ---------------------------------------------------------
	// PORTC

	// PTC0 --> LED8 --> Digital Output
	PORTC_PCR0 = 0|(PORT_PCR_MUX(0x1));
	// PTC1 --> LineDriver_Canal1 --> FTM0_CH0 Input
	PORTC_PCR1 = 0|(PORT_PCR_MUX(0x4));
	// PTC2 --> LineDriver_Canal2 --> FTM0_CH1 Input
	PORTC_PCR2 = 0|(PORT_PCR_MUX(0x4));
	// PTC3 --> LineDriver_Canal3 --> FTM0_CH2 Input
	PORTC_PCR3 = 0|(PORT_PCR_MUX(0x4));
	// PTC4 --> LineDriver_Canal4 --> FTM0_CH3 Input
	PORTC_PCR4 = 0|(PORT_PCR_MUX(0x4));
	// PTC5 --> InterfaceExterne_SPI0_CLK --> SPI0_SCK
	PORTC_PCR5 = 0|(PORT_PCR_MUX(0x2));
	// PTC6 --> InterfaceExterne_SPI0_SOUT --> SPI0_SOUT
	PORTC_PCR6 = 0|(PORT_PCR_MUX(0x2));
	// PTC7 --> InterfaceExterne_SPI0_SIN --> SPI0_SIN
	PORTC_PCR7 = 0|(PORT_PCR_MUX(0x2));
	// PTC8 --> LED7 --> Digital Output
	PORTC_PCR8 = 0|(PORT_PCR_MUX(0x1));	
	// PTC9 --> LED6 --> Digital Output
	PORTC_PCR9 = 0|(PORT_PCR_MUX(0x1));
	// PTC10 --> CaptGyro_SCL --> I2C1_SCL
	PORTC_PCR10 = 0|(PORT_PCR_MUX(0x2));
	// PTC11 --> CaptGyro_SDA --> I2C1_SDA
	PORTC_PCR11 = 0|(PORT_PCR_MUX(0x2));
	// PTC12 --> CaptGyro_INT --> Interrupt
	PORTC_PCR12 = 0|PORT_PCR_ISF_MASK|(PORT_PCR_MUX(0x1));
	// PTC13 --> CaptGyro_DRDY/INT2 --> Interrupt
	PORTC_PCR13 = 0|PORT_PCR_ISF_MASK|(PORT_PCR_MUX(0x1));
	// PTC14 --> InterfaceExterne_UART4_RX --> UART4_RX
	PORTC_PCR14 = 0|(PORT_PCR_MUX(0x3));
	// PTC15 --> InterfaceExterne_UART4_TX --> UART4_TX
	PORTC_PCR15 = 0|(PORT_PCR_MUX(0x3));
	// PTC16 --> InterfaceExterne_UART3_RX --> UART3_RX
	PORTC_PCR16 = 0|(PORT_PCR_MUX(0x3));
	// PTC17 --> InterfaceExterne_UART3_TX --> UART3_TX
	PORTC_PCR17 = 0|(PORT_PCR_MUX(0x3));	
	// PTC18 --> InterfaceExterne_PTC18 --> Digital Output
	PORTC_PCR18 = 0|(PORT_PCR_MUX(0x1));
	
	// ---------------------------------------------------------
	// PORTD
	// Pull-up enable
	// High drive strengh
	
	// PTD0 --> LED5 --> DIgital Output
	PORTD_PCR0 = 0|(PORT_PCR_MUX(0x1));
	// PTD1 --> LED4 --> DIgital Output
	PORTD_PCR1 = 0|(PORT_PCR_MUX(0x1));
	// PTD2 --> LED3 --> DIgital Output
	PORTD_PCR2 = 0|(PORT_PCR_MUX(0x1));
	// PTD3 --> LED2 --> DIgital Output
	PORTD_PCR3 = 0|(PORT_PCR_MUX(0x1));
	// PTD4 --> DriverMoteur1_PWM --> FTM0_CH4 Output
	PORTD_PCR4 = 0|(PORT_PCR_MUX(0x4));
	// PTD5 --> DriverMoteur2_PWM --> FTM0_CH5 Output
	PORTD_PCR5 = 0|(PORT_PCR_MUX(0x4));
	// PTD6 --> DriverMoteur3_PWM --> FTM0_CH6 Output
	PORTD_PCR6 = 0|(PORT_PCR_MUX(0x4));
	// PTD7 --> DriverMoteur4_PWM --> FTM0_CH7 Output
	PORTD_PCR7 = 0|(PORT_PCR_MUX(0x4));
	
	
	
	// ---------------------------------------------------------
	// PORTE
	
	// PTE0 --> NC
	PORTE_PCR0 = 0|(PORT_PCR_MUX(0x1));
	// PTE1 --> CaptPressure_DIN --> SPI1_SOUT
	PORTE_PCR1 = 0|(PORT_PCR_MUX(0x2));
	// PTE2 --> CaptPressure_SCLK --> SPI1_SCK
	PORTE_PCR2 = 0|(PORT_PCR_MUX(0x2));
	// PTE3 --> CaptPressure_DOUT --> SPI1_SIN
	PORTE_PCR3 = 0|(PORT_PCR_MUX(0x2));
	// PTE4 --> NC
	PORTE_PCR4 = 0|(PORT_PCR_MUX(0x1));
	// PTE5 --> NC
	PORTE_PCR5 = 0|(PORT_PCR_MUX(0x1));
	// PTE6 --> NC
	PORTE_PCR6 = 0|(PORT_PCR_MUX(0x1));
	// PTE16 --> CapteurCourant_Out --> ADC0_SE4a
	PORTE_PCR16 = 0|(PORT_PCR_MUX(0x0));
	// PTE17 --> CapteurTension --> ADC0_SE5a
	PORTE_PCR17 = 0|(PORT_PCR_MUX(0x0));
	// PTE18 --> NC
	PORTE_PCR18 = 0|(PORT_PCR_MUX(0x1));
	// PTE19 --> NC
	PORTE_PCR19 = 0|(PORT_PCR_MUX(0x1));
	// PTE24 --> NC
	PORTE_PCR24 = (PORT_PCR_MUX(0x1));
	// PTE25 --> NC
	PORTE_PCR25 = (PORT_PCR_MUX(0x1));
	// PTE26 --> NC
	PORTE_PCR26 = 0|(PORT_PCR_MUX(0x1));
}



//------------------------------------------------------------
// Peripherals clock init
//------------------------------------------------------------
void iCpu_PeriphClkInit(void)
{
	// K10 Sub-Family Reference Manual, Rev. 6, Nov 2011 page 269
		// System Clock Gating Control Register 2 (SIM_SCGC2)
		// DAC0 & DAC1 clock enable
		SIM_SCGC2|=(SIM_SCGC2_DAC0_MASK|SIM_SCGC2_DAC1_MASK);
		
		// K10 Sub-Family Reference Manual, Rev. 6, Nov 2011 page 270
		// System Clock Gating Control Register 3 (SIM_SCGC3)
		// ADC1, SPI2, FTM2 clock enable
		// SHDC & FLEXCAN1 clock disable
		SIM_SCGC3|=(SIM_SCGC3_SPI2_MASK|SIM_SCGC3_ADC1_MASK|SIM_SCGC3_FTM2_MASK);
		
		// K10 Sub-Family Reference Manual, Rev. 6, Nov 2011 page 271
		// System Clock Gating Control Register 4 (SIM_SCGC4)
		// UART2,I2C1 clock enable
		// LLWU,VREF,CMP,UART3,UART1,UART0,I2C0,CMT & EWM clock disable
		SIM_SCGC4|=(SIM_SCGC4_UART0_MASK|SIM_SCGC4_UART2_MASK|SIM_SCGC4_I2C1_MASK|SIM_SCGC4_I2C0_MASK);
		
		// K10 Sub-Family Reference Manual, Rev. 6, Nov 2011 page 273
		// System Clock Gating Control Register 5 (SIM_SCGC5)
		// PORTA,PORTA,PORTB,PORTC,PORTD clock enable
		// Touch sense and Reg file clock disable
		SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK | 
									SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTD_MASK | 
									SIM_SCGC5_PORTE_MASK );
		
		// K10 Sub-Family Reference Manual, Rev. 6, Nov 2011 page 275
		// System Clock Gating Control Register 6 (SIM_SCGC6)
		// Clock enable for FTFL,FTM0,ADC0, FTM1,PIT and SPI0, SPI1
		// Clock disable for RTC,PDB,CRC,I2S,FLEXCAN0,DMAMUX
		SIM_SCGC6|=(SIM_SCGC6_FTM1_MASK|SIM_SCGC6_FTM0_MASK|SIM_SCGC6_ADC0_MASK|SIM_SCGC6_PIT_MASK|SIM_SCGC6_SPI1_MASK|SIM_SCGC6_DSPI0_MASK|SIM_SCGC6_FTFL_MASK);
		
		// K10 Sub-Family Reference Manual, Rev. 6, Nov 2011 page 278
		// System Clock Gating Control Register 7 (SIM_SCGC7)
		// Clock enable for MPU,DMA, FLEXBUS
		SIM_SCGC7|=(SIM_SCGC7_DMA_MASK|SIM_SCGC7_FLEXBUS_MASK|SIM_SCGC7_MPU_MASK);

}

//------------------------------------------------------------
// Internal voltage reference init (VREF0)
//------------------------------------------------------------
static void iCpu_VREFInit(void)
{
	UInt8 *aVREFTRM=(UInt8*)(0x40074000);
		
		// K10 Sub-Family Reference Manual, Rev. 6, Nov 2011 page 851
		// VREF Status and Control Register (VREF_SC)
		// Voltage Reference enabled,VREF bandgap and tight regulation buffer on
		// VREF_OUT available for internal and external use
	  VREF_SC |= (VREF_SC_VREFEN_MASK|(VREF_SC_MODE_LV(2)));
	  
		*aVREFTRM|=0x3f;
		
		// Wait till the VREFSC is stable
		while (!(VREF_SC & VREF_SC_VREFST_MASK));
}


//------------------------------------------------------------
// CPU configuration
//------------------------------------------------------------
void iCpu_SysInit(void)
{
	// Peripherals clock init
	iCpu_PeriphClkInit();
	
	// Disable MPU
	MPU_CESR&=(~MPU_CESR_VLD_MASK);
	
	// Core and peripheral clock init
	iCpu_PllInit();
	
	
	// K10 pin functions configuration
	iCpu_PinFctCfg();
	
	// Internal voltage reference init (VREF0)
	iCpu_VREFInit();
}
