/*
 * mOrientationProcessing.c
 *
 *  Created on: 26 nov. 2012
 *      Author: alexandr.schnegg
 */

#include "def.h"
#include "mCapteurGyro.h"
#include "mCapteurAccelMagn.h"
#include <cmath>
#include "generateTrame.h"
#include "def.h"
#include "mCapteurAccelMagn.h"
#include "mCapteurGyro.h"
#include "mOrientationProcessing.h"
#include "stringConvert.h"
#include "mRegulation.h"

#define kNbCapteurs	3
#define kAccOffset 0
#define kAccScale (float)131.072
#define kGyroScale (float)500/(float)65536
#define kGyroOffsetX (Int16)2650
#define kGyroOffsetY (Int16)62930
#define kGyroOffsetZ (Int16)2750
#define kDT (float)0.01
#define kA	(float)0.05	//Pondération de l'acceleromètre
#define kB (float)(1-kA)

void mOrientationProcessing_setup(void)
{
	// PIT0 setup
	iPit_Config(kPit1, kDT);
}

/**
 * aRacc=Racc={Rx,Ry,Rz}
 */
void mOrientationProcessing_readSensor(float *aRacc, float *aGyroTab)
{
	UInt8 i;
	UInt16 tabReturnUInt16[kNbCapteurs];

	//Acquisition accel
	mCapteurAccelMagn_ReadAllAccelAxes(tabReturnUInt16);

	//Mise en forme accel
	for (i = 0; i < kNbCapteursMax; i++)
	{
		aRacc[i] = (float) ((Int16) tabReturnUInt16[i] - kAccOffset) * kAccScale;
	}

	//Acquisition gyro
	tabReturnUInt16[0] = mCapteurGyro_ReadGyroAxe(GyroAxe_X);
	tabReturnUInt16[1] = mCapteurGyro_ReadGyroAxe(GyroAxe_Y);
	tabReturnUInt16[2] = mCapteurGyro_ReadGyroAxe(GyroAxe_Z);

	//Mise en forme gyro	
	aGyroTab[0] = (float) ((Int16) tabReturnUInt16[0] - kGyroOffsetX) / kGyroScale; //Correspond Ayz
	aGyroTab[1] = (float) ((Int16) tabReturnUInt16[1] - kGyroOffsetY) / kGyroScale; //Correspond Axz
	aGyroTab[2] = (float) ((Int16) tabReturnUInt16[2] - kGyroOffsetZ) / kGyroScale; //Correspond Ayx

}

/**
 * Convertion du vecteur d'acceleration en angle dans le système gyroscopique
 * aA={Axz,Axy,Ayz}
 */
void mOrientationProcessing_convertToGyroSystem(float *aRacc, float *aA)
{
	aA[0] = atan2(-aRacc[1], aRacc[2]); //Axz gyro == A-yz accel
	aA[1] = atan2(-aRacc[0], -aRacc[1]); //Axy gyro == A-x-y accel
	aA[2] = atan2(-aRacc[0], aRacc[2]); //Ayz gyro == A-xz accel
}

void mOrientationProcessing_FilterFirstOrder(float *aAngle, float *aAngleRate, float *aResult)
{
	static float sResult_n1[] = { 0, 0, 0 };
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		aResult[i] = kB * (sResult_n1[i] + aAngleRate[i] * kDT) + kA * aAngle[i];
		sResult_n1[i] = aResult[i];
	}
}

float mOrientationProcessing_FilterSecondOrder(float aAngle, float aAngleRate)
{
	float aResult;
	static float sResult_n1 = 0;
	static float sResult_n2 = 0;
	static float sAngle_n1 = 0;
	static float sAngleRate_n1 = 0;
	sResult_n2 = sResult_n1;
	aResult = 2 * kB * sResult_n1 - kB * kB * sResult_n2 + (1 - kB * kB) * aAngle - 2 * kB * (1 - kB) * sAngle_n1 + kB * kB * kDT * (aAngleRate - sAngleRate_n1);
	sResult_n2 = sResult_n1;
	sResult_n1 = aResult;
	sAngle_n1 = aAngle;
	sAngleRate_n1 = aAngleRate;
	return aResult;
}

static double mOrientationProcessing_RadToDeg(float aRad)
{
	return aRad * (180 / PI);
}

void mOrientationProcessing_Execute(filterOrderEnum aOrder)
{
	enum stateEnum
	{
		kAcquire, kFilter, kSend,
	};
	static enum stateEnum aState = kAcquire;

	static float sRaccTab[3];
	static float sGyroTab[3];
	static float sATab[3];
	static Int16 sNumTempo = -1;
	UInt8 aVarTrame[kMaxTrameLength];
	static float sAngleTab[3] = { 0, 0, 0 };
	UInt8 i;
	UInt8 aVarData[kNbCapteurs][kNbDigitsMax];

	switch (aState)
	{

	case kAcquire:
		mOrientationProcessing_readSensor(sRaccTab, sGyroTab);
		mOrientationProcessing_convertToGyroSystem(sRaccTab, sATab);
		aState = kFilter;
	case kFilter:

		if (aOrder == kFirstOrder)
		{
			mOrientationProcessing_FilterFirstOrder(sATab, sGyroTab, sAngleTab);
		}
		else if (aOrder == kSecondOrder)
		{
			//sAngleTab[i]=mOrientationProcessing_FilterSecondOrder(sATab[i], sGyroTab[i]);
		}

		for (i = 0; i < 3; i++)
		{
			sAngleTab[i] = mOrientationProcessing_RadToDeg(sAngleTab[i]);
		}

		sNumTempo = mDelay_GetDelay(kPit0, kDT * 1000);
		aState = kSend;
	case kSend:
		if (mDelay_IsDelayDone(kPit0, sNumTempo))
		{
			mDelay_DelayRelease(kPit0, sNumTempo);
			mRegulation_execute(0, 0, sAngleTab[0], sAngleTab[2]);
			for (i = 0; i < 3; i++)
			{
				stringConvert_FloatToChar(sAngleTab[i], aVarData[i]);
			}
			generateTrame(kDestAngle, kFloat, aVarData, aVarTrame, 3);
			mRfInterface_SendString(aVarTrame);
			aState = kAcquire;
		}
		break;
	}
}

